""""""""""""""""""""""""""""""""""""""""""
"一般配置                   
""""""""""""""""""""""""""""""""""""""""
"缩进相关
set sw=4 "自动缩进的时候，缩进尺寸为 4 个空格"
set ts=4 "Tab 宽度为 4 个字符"
set et   "编辑时将所有 Tab 替换为空格
set smarttab "可以只按一下Backspace就删除et替换Tab的4 个空格了
set smartindent "缩进相关
set autoindent  "自动缩进
set lbr "排版避免折行
set fo+=mB "汉子换行打断不添加空格

"字符编码相关
set termencoding=utf-8
set encoding=utf8  
set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030
set langmenu=zh_CN.UTF-8"语言设置
set helplang=cn "帮助信息用中文
set cmdheight=2" 总是显示状态行
set iskeyword+=_,$,@,%,#,-  "带有如下符号的单词不要被换行分割

"外观显示
syntax on "语法高亮
set number "显示行号
set mousemodel=popup "右键出现菜单
set shortmess=atI   " 启动的时候不显示那个援助乌干达儿童的提示  
set go=             " 不要图形按钮  
"color desert     " 设置背景主题  
color ron     " 设置背景主题  
set ruler           " 显示标尺  
set showcmd         " 输入的命令显示出来，看的清楚些  
set scrolloff=3     " 光标移动到buffer的顶部和底部时保持3行距离  
set laststatus=2    " 启动显示状态行(1),总是显示状态行(2)  
set magic          " 设置魔术
set guioptions-=T  " 隐藏工具栏
set guioptions-=m  " 隐藏菜单栏

"其他编辑相关
set sm "显示括号配对情况
set selection=inclusive "光标所在位置也属于被选中的范围
set wildmenu "在命令模式下使用 Tab 自动补全的时候显示菜单
set nocompatible  "去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限  
set mouse=v "在编辑模式下使用鼠标
set autoread  "设置当文件被改动时自动载入
set completeopt=preview,menu "代码补全 
set hlsearch     "搜索逐字符高亮1                                                                                                                                                                                                                    
set incsearch    "搜索逐字符高亮2
set autowrite    "自动保存
set noeb " 去掉输入错误的提示声音
set confirm " 在处理未保存或只读文件的时候，弹出确认
set nobackup  "禁止生成临时文件1
set noswapfile  "禁止生成临时文件2
set ignorecase  "搜索忽略大小写
set t_ti= t_te=  "退出vim后，内容显示在终端屏幕
set linespace=0 " 增强模式中的命令行自动完成操作
set fillchars=vert:\ ,stl:\ ,stlnc:\ " 在被分割的窗口间显示空白，便于阅读
set showmatch " 高亮显示匹配的括号
set matchtime=1  " 匹配括号高亮的时间（单位是十分之一秒）
set completeopt=longest,menu "打开文件类型检测, 加了这句才可以用智能补全
" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
set mouse=a                          "鼠标定位1
set selection=exclusive          "鼠标定位2
set selectmode=mouse,key    "鼠标定位3

"设置tags  
set tags=tags;  
set autochdir 
set fileformats=unix,dos

""""""""""""""""""""""""""""""""""""""""
"文件，自动载入 配置                   
""""""""""""""""""""""""""""""""""""""""
filetype on" 侦测文件类型
filetype plugin indent on 
filetype plugin on" 载入文件类型插件
filetype indent on  " 为特定文件类型载入相关缩进文件
autocmd! bufwritepost .vimrc source %     "vimrc文件修改之后自动加载。
au FileType php setlocal dict+=~/.vim/dict/php_funclist.dict "字符间插入的像素行数目
au FileType css setlocal dict+=~/.vim/dict/css.dict
au FileType c setlocal dict+=~/.vim/dict/c.dict
au FileType cpp setlocal dict+=~/.vim/dict/cpp.dict
au FileType scale setlocal dict+=~/.vim/dict/scale.dict
au FileType javascript setlocal dict+=~/.vim/dict/javascript.dict
au FileType html setlocal dict+=~/.vim/dict/javascript.dict
au FileType html setlocal dict+=~/.vim/dict/css.dict


""""""""""""""""""""""""""""""""""""""""
"插件配置                   
""""""""""""""""""""""""""""""""""""""""

"""""CTags的设定""""
let Tlist_Sort_Type = "name"    " 按照名称排序  
let Tlist_Use_Right_Window = 1  " 在右侧显示窗口  
let Tlist_Compart_Format = 1    " 压缩方式  
let Tlist_Exist_OnlyWindow = 1  " 如果只有一个buffer，kill窗口也kill掉buffer  
""let Tlist_File_Fold_Auto_Close = 0  " 不要关闭其他文件的tags  
""let Tlist_Enable_Fold_Column = 0    " 不要显示折叠树  
"let Tlist_Show_One_File=1            "不同时显示多个文件的tag，只显示当前文件的

""""CtrlP插件配置搜索文件的""""
"设置快捷键为ce
let g:ctrlp_map = 'ce'   
let g:ctrlp_cmd = 'CtrlP'
map cm :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
  \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
  \ }
let g:ctrlp_working_path_mode='ra'
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

"""TagList默认打开Taglist""""
let Tlist_Auto_Open=0 
" Tag list (ctags) 
let Tlist_Ctags_Cmd = '/usr/local/bin/ctags' 
let Tlist_Show_One_File = 1 "不同时显示多个文件的tag，只显示当前文件的 
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Exit_OnlyWindow = 1 "如果taglist窗口是最后一个窗口，则退出vim 
let Tlist_Use_Right_Window = 1 "在右侧窗口中显示taglist窗口

""""minibufexpl插件的一般设置""""
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1  
nmap tl :Tlist<cr>

""""ack 搜索插件""""
let g:ackprg = 'ag --nogroup --nocolor --column' "如果用ag代替ack的话打开此注释 
nmap ck :Ack -i  

""""PHP 语法检查插件""""
"phpqa_codesniffer_args = ''  里面就是phpcs的配置可以查询配置一下
let g:phpqa_messdetector_ruleset = "/Users/caida/process/src_pack/phpmd-rulesets/phpmd.xml"
let g:phpqa_codesniffer_args = "--standard=Zend" 
let g:phpqa_codesniffer_args = "--severity=8"
let g:phpqa_php_cmd='php'
let g:phpqa_codesniffer_cmd='phpcs'
let g:phpqa_messdetector_cmd='phpmd'
let g:phpqa_messdetector_autorun = 0 


""""git diff插件
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
nmap <Leader>ha <Plug>GitGutterStageHunk
nmap <Leader>hv <Plug>GitGutterPreviewHunk
nmap <Leader>hr <Plug>GitGutterUndoHunk

""""""""""""""""""""""""""""""""""""""""
"快捷件配置                   
""""""""""""""""""""""""""""""""""""""""
"添加全局快捷键前缀
let mapleader = ","

"添加注释
nmap <leader>/ 0i//<ESC>
nmap <leader>// :s/^\/\//<ESC>

":e ce me  打开多个切换 
"nmap <c-]> :bp<CR>
"nmap <c-[> :bn<CR>

"刷新vimrc文件
nmap <leader>s :source .vimrc<CR> 

"长传130代码
nnoremap <leader>ke :call SyncFile()<cr> 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"实用设置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""打开文件自动回到上次退出的地方""""
if has("autocmd")
      autocmd BufReadPost *
          \ if line("'\"") > 0 && line("'\"") <= line("$") |
          \   exe "normal g`\"" |
          \ endif
endif


""""""""""""""""""""""""""""""""""""""""""
" 函数定义                   
""""""""""""""""""""""""""""""""""""""""""
""""新建.c,.h,.sh,.java文件，自动插入文件头""""
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.rb,*.java,*.py exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头 func SetTitle() 
func! SetTitle()
    "如果文件类型为.sh文件 
    if &filetype == 'sh' 
        call setline(1,"\#!/bin/bash") 
        call append(line("."), "") 
    elseif &filetype == 'python'
        call setline(1,"#!/usr/bin/env python")
        call append(line("."),"# coding=utf-8")
        call append(line(".")+1, "") 

    elseif &filetype == 'ruby'
        call setline(1,"#!/usr/bin/env ruby")
        call append(line("."),"# encoding: utf-8")
        call append(line(".")+1, "")

        "    elseif &filetype == 'mkd'
        "        call setline(1,"<head><meta charset=\"UTF-8\"></head>")
    else 
        call setline(1, "/*************************************************************************") 
        call append(line("."), " > File Name: ".expand("%")) 
        call append(line(".")+1, " > Author: ") 
        call append(line(".")+2, " > Mail: ") 
        call append(line(".")+3, " > Created Time: ".strftime("%c")) 
        call append(line(".")+4, " ************************************************************************/") 
        call append(line(".")+5, "")
    endif
    if expand("%:e") == 'cpp'
        call append(line(".")+6, "#include<iostream>")
        call append(line(".")+7, "using namespace std;")
        call append(line(".")+8, "")
    endif
    if &filetype == 'c'
        call append(line(".")+6, "#include<stdio.h>")
        call append(line(".")+7, "")
    endif
    if expand("%:e") == 'h'
        call append(line(".")+6, "#ifndef _".toupper(expand("%:r"))."_H")
        call append(line(".")+7, "#define _".toupper(expand("%:r"))."_H")
        call append(line(".")+8, "#endif")
    endif
    if &filetype == 'java'
        call append(line(".")+6,"public class ".expand("%:r"))
        call append(line(".")+7,"")
    endif
    "新建文件后，自动定位到文件末尾
endfunc 
autocmd BufNewFile * normal G


""""C，C++ 按F5编译运行""""
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
exec "w"
if &filetype == 'c'
exec "!gcc % -o %<"
exec "!time ./%<"
elseif &filetype == 'cpp'
exec "!g++ % -o %<"
exec "!time ./%<"
elseif &filetype == 'java' 
exec "!javac %" 
exec "!time java %<"
elseif &filetype == 'sh'
:!time bash %
elseif &filetype == 'python'
exec "!time python2.7 %"
    elseif &filetype == 'html'
        exec "!firefox % &"
    elseif &filetype == 'go'
"        exec "!go build %<"
        exec "!time go run %"
    elseif &filetype == 'mkd'
        exec "!~/.vim/markdown.pl % > %.html &"
        exec "!firefox %.html &"
endif
endfunc
"C,C++的调试
map <F8> :call Rungdb()<CR>
func! Rungdb()
exec "w"
exec "!g++ % -g -o %<"
exec "!gdb ./%<"
endfunc


"""""代码格式优化化""""
map <F6> :call FormartSrc()<CR><CR>
"定义FormartSrc()
func! FormartSrc()
    exec "w"
    if &filetype == 'c'
        exec "!astyle --style=ansi -a --suffix=none %"
    elseif &filetype == 'cpp' || &filetype == 'hpp'
        exec "r !astyle --style=ansi --one-line=keep-statements -a --suffix=none %> /dev/null 2>&1"
    elseif &filetype == 'perl'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'py'||&filetype == 'python'
        exec "r !autopep8 -i --aggressive %"
    elseif &filetype == 'java'
        exec "!astyle --style=java --suffix=none %"
    elseif &filetype == 'jsp'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'xml'
        exec "!astyle --style=gnu --suffix=none %"
    else
        exec "normal gg=G"
        return
    endif
    exec "e! %"
endfunc

""""" 本地上传函数""""
"上传130 代码
function! SyncFile()
    let localDir = expand("%:p")
    let remoteDir = '/mfw_www'.strpart(localDir, matchend(localDir,'www2011'))
    let scpCmd = "scp -P 333 ".localDir." caida@10.1.1.130:".remoteDir
    echo system(scpCmd) 
endfunction



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 插件下载管理
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let Vundle manage Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'  
Bundle 'ctrlpvim/ctrlp.vim' 
Bundle 'mileszs/ack.vim' 
Bundle 'bling/vim-airline'
Bundle 'joonty/vim-phpqa.git'
Bundle 'tpope/vim-fugitive'
Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'https://github.com/wincent/command-t.git'
Bundle 'Auto-Pairs'
Bundle 'python-imports.vim'
Bundle 'CaptureClipboard'
Bundle 'ctrlp-modified.vim'
Bundle 'last_edit_marker.vim'
Bundle 'synmark.vim'
Bundle 'SQLComplete.vim'
Bundle 'Javascript-OmniCompletion-with-YUI-and-j'
Bundle 'jslint.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'Vim-Script-Updater'
Bundle 'tacahiroy/ctrlp-funky'
Bundle 'jsbeautify'
Bundle 'django_templates.vim'
Bundle 'Django-Projects'
Bundle 'airblade/vim-gitgutter'
